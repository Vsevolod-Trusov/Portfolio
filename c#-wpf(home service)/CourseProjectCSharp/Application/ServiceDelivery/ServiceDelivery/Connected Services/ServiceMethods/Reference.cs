//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceDelivery.ServiceMethods {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceMethods.IDeliveryService")]
    public interface IDeliveryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/AddUserCount", ReplyAction="http://tempuri.org/IDeliveryService/AddUserCountResponse")]
        void AddUserCount(System.Guid Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/AddUserCount", ReplyAction="http://tempuri.org/IDeliveryService/AddUserCountResponse")]
        System.Threading.Tasks.Task AddUserCountAsync(System.Guid Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/RemoveUserCount", ReplyAction="http://tempuri.org/IDeliveryService/RemoveUserCountResponse")]
        void RemoveUserCount(System.Guid Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/RemoveUserCount", ReplyAction="http://tempuri.org/IDeliveryService/RemoveUserCountResponse")]
        System.Threading.Tasks.Task RemoveUserCountAsync(System.Guid Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetOnlineUsersCount", ReplyAction="http://tempuri.org/IDeliveryService/GetOnlineUsersCountResponse")]
        int GetOnlineUsersCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetOnlineUsersCount", ReplyAction="http://tempuri.org/IDeliveryService/GetOnlineUsersCountResponse")]
        System.Threading.Tasks.Task<int> GetOnlineUsersCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/CreateAdminEntry", ReplyAction="http://tempuri.org/IDeliveryService/CreateAdminEntryResponse")]
        string CreateAdminEntry(string login, string password, string confirmPassword, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/CreateAdminEntry", ReplyAction="http://tempuri.org/IDeliveryService/CreateAdminEntryResponse")]
        System.Threading.Tasks.Task<string> CreateAdminEntryAsync(string login, string password, string confirmPassword, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/Registration", ReplyAction="http://tempuri.org/IDeliveryService/RegistrationResponse")]
        string Registration(string login, string password, string role, string email, string avatarPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/Registration", ReplyAction="http://tempuri.org/IDeliveryService/RegistrationResponse")]
        System.Threading.Tasks.Task<string> RegistrationAsync(string login, string password, string role, string email, string avatarPath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/RegistrationWithValidation", ReplyAction="http://tempuri.org/IDeliveryService/RegistrationWithValidationResponse")]
        string RegistrationWithValidation(string login, string password, string confirmPassword, string role, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/RegistrationWithValidation", ReplyAction="http://tempuri.org/IDeliveryService/RegistrationWithValidationResponse")]
        System.Threading.Tasks.Task<string> RegistrationWithValidationAsync(string login, string password, string confirmPassword, string role, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/ValidationAuthorisation", ReplyAction="http://tempuri.org/IDeliveryService/ValidationAuthorisationResponse")]
        string ValidationAuthorisation(string login, string password, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/ValidationAuthorisation", ReplyAction="http://tempuri.org/IDeliveryService/ValidationAuthorisationResponse")]
        System.Threading.Tasks.Task<string> ValidationAuthorisationAsync(string login, string password, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/ValidationRegistration", ReplyAction="http://tempuri.org/IDeliveryService/ValidationRegistrationResponse")]
        string ValidationRegistration(string login, string password, string confirmPassword, string role, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/ValidationRegistration", ReplyAction="http://tempuri.org/IDeliveryService/ValidationRegistrationResponse")]
        System.Threading.Tasks.Task<string> ValidationRegistrationAsync(string login, string password, string confirmPassword, string role, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/Authorisation", ReplyAction="http://tempuri.org/IDeliveryService/AuthorisationResponse")]
        string Authorisation(string login, string password, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/Authorisation", ReplyAction="http://tempuri.org/IDeliveryService/AuthorisationResponse")]
        System.Threading.Tasks.Task<string> AuthorisationAsync(string login, string password, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/AuthorisationWithValidation", ReplyAction="http://tempuri.org/IDeliveryService/AuthorisationWithValidationResponse")]
        string AuthorisationWithValidation(string login, string password, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/AuthorisationWithValidation", ReplyAction="http://tempuri.org/IDeliveryService/AuthorisationWithValidationResponse")]
        System.Threading.Tasks.Task<string> AuthorisationWithValidationAsync(string login, string password, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetUserAvatarPath", ReplyAction="http://tempuri.org/IDeliveryService/GetUserAvatarPathResponse")]
        string GetUserAvatarPath(string login, string password, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetUserAvatarPath", ReplyAction="http://tempuri.org/IDeliveryService/GetUserAvatarPathResponse")]
        System.Threading.Tasks.Task<string> GetUserAvatarPathAsync(string login, string password, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetOrders", ReplyAction="http://tempuri.org/IDeliveryService/GetOrdersResponse")]
        System.Collections.Generic.Dictionary<string, string>[] GetOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetOrders", ReplyAction="http://tempuri.org/IDeliveryService/GetOrdersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>[]> GetOrdersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetNecessaryStaff", ReplyAction="http://tempuri.org/IDeliveryService/GetNecessaryStaffResponse")]
        System.Collections.Generic.Dictionary<string, string>[] GetNecessaryStaff(string category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetNecessaryStaff", ReplyAction="http://tempuri.org/IDeliveryService/GetNecessaryStaffResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>[]> GetNecessaryStaffAsync(string category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/ChangeOrder", ReplyAction="http://tempuri.org/IDeliveryService/ChangeOrderResponse")]
        void ChangeOrder(System.Guid staffId, System.Guid ordersId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/ChangeOrder", ReplyAction="http://tempuri.org/IDeliveryService/ChangeOrderResponse")]
        System.Threading.Tasks.Task ChangeOrderAsync(System.Guid staffId, System.Guid ordersId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetFilteredOrdersByStatus", ReplyAction="http://tempuri.org/IDeliveryService/GetFilteredOrdersByStatusResponse")]
        System.Collections.Generic.Dictionary<string, string>[] GetFilteredOrdersByStatus(string parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetFilteredOrdersByStatus", ReplyAction="http://tempuri.org/IDeliveryService/GetFilteredOrdersByStatusResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>[]> GetFilteredOrdersByStatusAsync(string parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetFilteredWaitingOrdersByStatus", ReplyAction="http://tempuri.org/IDeliveryService/GetFilteredWaitingOrdersByStatusResponse")]
        System.Collections.Generic.Dictionary<string, string>[] GetFilteredWaitingOrdersByStatus(string parameter, System.Guid executorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetFilteredWaitingOrdersByStatus", ReplyAction="http://tempuri.org/IDeliveryService/GetFilteredWaitingOrdersByStatusResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>[]> GetFilteredWaitingOrdersByStatusAsync(string parameter, System.Guid executorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/SendOrder", ReplyAction="http://tempuri.org/IDeliveryService/SendOrderResponse")]
        void SendOrder(string description, decimal price, System.DateTime deadline, string category, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/SendOrder", ReplyAction="http://tempuri.org/IDeliveryService/SendOrderResponse")]
        System.Threading.Tasks.Task SendOrderAsync(string description, decimal price, System.DateTime deadline, string category, System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetId", ReplyAction="http://tempuri.org/IDeliveryService/GetIdResponse")]
        System.Guid GetId(string Login, string Password, string Role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetId", ReplyAction="http://tempuri.org/IDeliveryService/GetIdResponse")]
        System.Threading.Tasks.Task<System.Guid> GetIdAsync(string Login, string Password, string Role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/CreateNewServiceType", ReplyAction="http://tempuri.org/IDeliveryService/CreateNewServiceTypeResponse")]
        void CreateNewServiceType(string Category, decimal Price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/CreateNewServiceType", ReplyAction="http://tempuri.org/IDeliveryService/CreateNewServiceTypeResponse")]
        System.Threading.Tasks.Task CreateNewServiceTypeAsync(string Category, decimal Price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetStaffForReview", ReplyAction="http://tempuri.org/IDeliveryService/GetStaffForReviewResponse")]
        System.Collections.Generic.Dictionary<string, string>[] GetStaffForReview(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetStaffForReview", ReplyAction="http://tempuri.org/IDeliveryService/GetStaffForReviewResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>[]> GetStaffForReviewAsync(System.Guid customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/CreateReview", ReplyAction="http://tempuri.org/IDeliveryService/CreateReviewResponse")]
        void CreateReview(string Content, System.Guid CustomerId, System.Guid ExecutorId, string PhotoPath, int Estimation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/CreateReview", ReplyAction="http://tempuri.org/IDeliveryService/CreateReviewResponse")]
        System.Threading.Tasks.Task CreateReviewAsync(string Content, System.Guid CustomerId, System.Guid ExecutorId, string PhotoPath, int Estimation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetCustomerOrders", ReplyAction="http://tempuri.org/IDeliveryService/GetCustomerOrdersResponse")]
        System.Collections.Generic.Dictionary<string, string>[] GetCustomerOrders(System.Guid Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetCustomerOrders", ReplyAction="http://tempuri.org/IDeliveryService/GetCustomerOrdersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>[]> GetCustomerOrdersAsync(System.Guid Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetWaitingOrders", ReplyAction="http://tempuri.org/IDeliveryService/GetWaitingOrdersResponse")]
        System.Collections.Generic.Dictionary<string, string>[] GetWaitingOrders(System.Guid ExecutorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetWaitingOrders", ReplyAction="http://tempuri.org/IDeliveryService/GetWaitingOrdersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>[]> GetWaitingOrdersAsync(System.Guid ExecutorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/CompleteOrder", ReplyAction="http://tempuri.org/IDeliveryService/CompleteOrderResponse")]
        void CompleteOrder(System.Guid ordersId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/CompleteOrder", ReplyAction="http://tempuri.org/IDeliveryService/CompleteOrderResponse")]
        System.Threading.Tasks.Task CompleteOrderAsync(System.Guid ordersId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/ChangeStaffProfile", ReplyAction="http://tempuri.org/IDeliveryService/ChangeStaffProfileResponse")]
        void ChangeStaffProfile(System.Guid staffProfileId, string serviceTypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/ChangeStaffProfile", ReplyAction="http://tempuri.org/IDeliveryService/ChangeStaffProfileResponse")]
        System.Threading.Tasks.Task ChangeStaffProfileAsync(System.Guid staffProfileId, string serviceTypeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetServiceTypes", ReplyAction="http://tempuri.org/IDeliveryService/GetServiceTypesResponse")]
        string[] GetServiceTypes(System.Guid executorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetServiceTypes", ReplyAction="http://tempuri.org/IDeliveryService/GetServiceTypesResponse")]
        System.Threading.Tasks.Task<string[]> GetServiceTypesAsync(System.Guid executorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/CountExecutorServiceTypes", ReplyAction="http://tempuri.org/IDeliveryService/CountExecutorServiceTypesResponse")]
        int CountExecutorServiceTypes(System.Guid executorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/CountExecutorServiceTypes", ReplyAction="http://tempuri.org/IDeliveryService/CountExecutorServiceTypesResponse")]
        System.Threading.Tasks.Task<int> CountExecutorServiceTypesAsync(System.Guid executorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetReviews", ReplyAction="http://tempuri.org/IDeliveryService/GetReviewsResponse")]
        System.Collections.Generic.Dictionary<string, string>[] GetReviews(System.Guid executorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetReviews", ReplyAction="http://tempuri.org/IDeliveryService/GetReviewsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>[]> GetReviewsAsync(System.Guid executorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/CountReviews", ReplyAction="http://tempuri.org/IDeliveryService/CountReviewsResponse")]
        int CountReviews(System.Guid executorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/CountReviews", ReplyAction="http://tempuri.org/IDeliveryService/CountReviewsResponse")]
        System.Threading.Tasks.Task<int> CountReviewsAsync(System.Guid executorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/DeleteReview", ReplyAction="http://tempuri.org/IDeliveryService/DeleteReviewResponse")]
        void DeleteReview(System.Guid executorId, System.Guid reviewId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/DeleteReview", ReplyAction="http://tempuri.org/IDeliveryService/DeleteReviewResponse")]
        System.Threading.Tasks.Task DeleteReviewAsync(System.Guid executorId, System.Guid reviewId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/ChangeAvatar", ReplyAction="http://tempuri.org/IDeliveryService/ChangeAvatarResponse")]
        void ChangeAvatar(System.Guid profileId, string ImagePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/ChangeAvatar", ReplyAction="http://tempuri.org/IDeliveryService/ChangeAvatarResponse")]
        System.Threading.Tasks.Task ChangeAvatarAsync(System.Guid profileId, string ImagePath);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/ChangeEmail", ReplyAction="http://tempuri.org/IDeliveryService/ChangeEmailResponse")]
        void ChangeEmail(System.Guid profileId, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/ChangeEmail", ReplyAction="http://tempuri.org/IDeliveryService/ChangeEmailResponse")]
        System.Threading.Tasks.Task ChangeEmailAsync(System.Guid profileId, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetEmail", ReplyAction="http://tempuri.org/IDeliveryService/GetEmailResponse")]
        string GetEmail(System.Guid profileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetEmail", ReplyAction="http://tempuri.org/IDeliveryService/GetEmailResponse")]
        System.Threading.Tasks.Task<string> GetEmailAsync(System.Guid profileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetCustomerFilteredOrders", ReplyAction="http://tempuri.org/IDeliveryService/GetCustomerFilteredOrdersResponse")]
        System.Collections.Generic.Dictionary<string, string>[] GetCustomerFilteredOrders(System.Guid profileId, string parameter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeliveryService/GetCustomerFilteredOrders", ReplyAction="http://tempuri.org/IDeliveryService/GetCustomerFilteredOrdersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>[]> GetCustomerFilteredOrdersAsync(System.Guid profileId, string parameter);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDeliveryServiceChannel : ServiceDelivery.ServiceMethods.IDeliveryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeliveryServiceClient : System.ServiceModel.ClientBase<ServiceDelivery.ServiceMethods.IDeliveryService>, ServiceDelivery.ServiceMethods.IDeliveryService {
        
        public DeliveryServiceClient() {
        }
        
        public DeliveryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DeliveryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DeliveryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DeliveryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddUserCount(System.Guid Id) {
            base.Channel.AddUserCount(Id);
        }
        
        public System.Threading.Tasks.Task AddUserCountAsync(System.Guid Id) {
            return base.Channel.AddUserCountAsync(Id);
        }
        
        public void RemoveUserCount(System.Guid Id) {
            base.Channel.RemoveUserCount(Id);
        }
        
        public System.Threading.Tasks.Task RemoveUserCountAsync(System.Guid Id) {
            return base.Channel.RemoveUserCountAsync(Id);
        }
        
        public int GetOnlineUsersCount() {
            return base.Channel.GetOnlineUsersCount();
        }
        
        public System.Threading.Tasks.Task<int> GetOnlineUsersCountAsync() {
            return base.Channel.GetOnlineUsersCountAsync();
        }
        
        public string CreateAdminEntry(string login, string password, string confirmPassword, string email) {
            return base.Channel.CreateAdminEntry(login, password, confirmPassword, email);
        }
        
        public System.Threading.Tasks.Task<string> CreateAdminEntryAsync(string login, string password, string confirmPassword, string email) {
            return base.Channel.CreateAdminEntryAsync(login, password, confirmPassword, email);
        }
        
        public string Registration(string login, string password, string role, string email, string avatarPath) {
            return base.Channel.Registration(login, password, role, email, avatarPath);
        }
        
        public System.Threading.Tasks.Task<string> RegistrationAsync(string login, string password, string role, string email, string avatarPath) {
            return base.Channel.RegistrationAsync(login, password, role, email, avatarPath);
        }
        
        public string RegistrationWithValidation(string login, string password, string confirmPassword, string role, string email) {
            return base.Channel.RegistrationWithValidation(login, password, confirmPassword, role, email);
        }
        
        public System.Threading.Tasks.Task<string> RegistrationWithValidationAsync(string login, string password, string confirmPassword, string role, string email) {
            return base.Channel.RegistrationWithValidationAsync(login, password, confirmPassword, role, email);
        }
        
        public string ValidationAuthorisation(string login, string password, string role) {
            return base.Channel.ValidationAuthorisation(login, password, role);
        }
        
        public System.Threading.Tasks.Task<string> ValidationAuthorisationAsync(string login, string password, string role) {
            return base.Channel.ValidationAuthorisationAsync(login, password, role);
        }
        
        public string ValidationRegistration(string login, string password, string confirmPassword, string role, string email) {
            return base.Channel.ValidationRegistration(login, password, confirmPassword, role, email);
        }
        
        public System.Threading.Tasks.Task<string> ValidationRegistrationAsync(string login, string password, string confirmPassword, string role, string email) {
            return base.Channel.ValidationRegistrationAsync(login, password, confirmPassword, role, email);
        }
        
        public string Authorisation(string login, string password, string role) {
            return base.Channel.Authorisation(login, password, role);
        }
        
        public System.Threading.Tasks.Task<string> AuthorisationAsync(string login, string password, string role) {
            return base.Channel.AuthorisationAsync(login, password, role);
        }
        
        public string AuthorisationWithValidation(string login, string password, string role) {
            return base.Channel.AuthorisationWithValidation(login, password, role);
        }
        
        public System.Threading.Tasks.Task<string> AuthorisationWithValidationAsync(string login, string password, string role) {
            return base.Channel.AuthorisationWithValidationAsync(login, password, role);
        }
        
        public string GetUserAvatarPath(string login, string password, string role) {
            return base.Channel.GetUserAvatarPath(login, password, role);
        }
        
        public System.Threading.Tasks.Task<string> GetUserAvatarPathAsync(string login, string password, string role) {
            return base.Channel.GetUserAvatarPathAsync(login, password, role);
        }
        
        public System.Collections.Generic.Dictionary<string, string>[] GetOrders() {
            return base.Channel.GetOrders();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>[]> GetOrdersAsync() {
            return base.Channel.GetOrdersAsync();
        }
        
        public System.Collections.Generic.Dictionary<string, string>[] GetNecessaryStaff(string category) {
            return base.Channel.GetNecessaryStaff(category);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>[]> GetNecessaryStaffAsync(string category) {
            return base.Channel.GetNecessaryStaffAsync(category);
        }
        
        public void ChangeOrder(System.Guid staffId, System.Guid ordersId) {
            base.Channel.ChangeOrder(staffId, ordersId);
        }
        
        public System.Threading.Tasks.Task ChangeOrderAsync(System.Guid staffId, System.Guid ordersId) {
            return base.Channel.ChangeOrderAsync(staffId, ordersId);
        }
        
        public System.Collections.Generic.Dictionary<string, string>[] GetFilteredOrdersByStatus(string parameter) {
            return base.Channel.GetFilteredOrdersByStatus(parameter);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>[]> GetFilteredOrdersByStatusAsync(string parameter) {
            return base.Channel.GetFilteredOrdersByStatusAsync(parameter);
        }
        
        public System.Collections.Generic.Dictionary<string, string>[] GetFilteredWaitingOrdersByStatus(string parameter, System.Guid executorId) {
            return base.Channel.GetFilteredWaitingOrdersByStatus(parameter, executorId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>[]> GetFilteredWaitingOrdersByStatusAsync(string parameter, System.Guid executorId) {
            return base.Channel.GetFilteredWaitingOrdersByStatusAsync(parameter, executorId);
        }
        
        public void SendOrder(string description, decimal price, System.DateTime deadline, string category, System.Guid customerId) {
            base.Channel.SendOrder(description, price, deadline, category, customerId);
        }
        
        public System.Threading.Tasks.Task SendOrderAsync(string description, decimal price, System.DateTime deadline, string category, System.Guid customerId) {
            return base.Channel.SendOrderAsync(description, price, deadline, category, customerId);
        }
        
        public System.Guid GetId(string Login, string Password, string Role) {
            return base.Channel.GetId(Login, Password, Role);
        }
        
        public System.Threading.Tasks.Task<System.Guid> GetIdAsync(string Login, string Password, string Role) {
            return base.Channel.GetIdAsync(Login, Password, Role);
        }
        
        public void CreateNewServiceType(string Category, decimal Price) {
            base.Channel.CreateNewServiceType(Category, Price);
        }
        
        public System.Threading.Tasks.Task CreateNewServiceTypeAsync(string Category, decimal Price) {
            return base.Channel.CreateNewServiceTypeAsync(Category, Price);
        }
        
        public System.Collections.Generic.Dictionary<string, string>[] GetStaffForReview(System.Guid customerId) {
            return base.Channel.GetStaffForReview(customerId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>[]> GetStaffForReviewAsync(System.Guid customerId) {
            return base.Channel.GetStaffForReviewAsync(customerId);
        }
        
        public void CreateReview(string Content, System.Guid CustomerId, System.Guid ExecutorId, string PhotoPath, int Estimation) {
            base.Channel.CreateReview(Content, CustomerId, ExecutorId, PhotoPath, Estimation);
        }
        
        public System.Threading.Tasks.Task CreateReviewAsync(string Content, System.Guid CustomerId, System.Guid ExecutorId, string PhotoPath, int Estimation) {
            return base.Channel.CreateReviewAsync(Content, CustomerId, ExecutorId, PhotoPath, Estimation);
        }
        
        public System.Collections.Generic.Dictionary<string, string>[] GetCustomerOrders(System.Guid Id) {
            return base.Channel.GetCustomerOrders(Id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>[]> GetCustomerOrdersAsync(System.Guid Id) {
            return base.Channel.GetCustomerOrdersAsync(Id);
        }
        
        public System.Collections.Generic.Dictionary<string, string>[] GetWaitingOrders(System.Guid ExecutorId) {
            return base.Channel.GetWaitingOrders(ExecutorId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>[]> GetWaitingOrdersAsync(System.Guid ExecutorId) {
            return base.Channel.GetWaitingOrdersAsync(ExecutorId);
        }
        
        public void CompleteOrder(System.Guid ordersId) {
            base.Channel.CompleteOrder(ordersId);
        }
        
        public System.Threading.Tasks.Task CompleteOrderAsync(System.Guid ordersId) {
            return base.Channel.CompleteOrderAsync(ordersId);
        }
        
        public void ChangeStaffProfile(System.Guid staffProfileId, string serviceTypeName) {
            base.Channel.ChangeStaffProfile(staffProfileId, serviceTypeName);
        }
        
        public System.Threading.Tasks.Task ChangeStaffProfileAsync(System.Guid staffProfileId, string serviceTypeName) {
            return base.Channel.ChangeStaffProfileAsync(staffProfileId, serviceTypeName);
        }
        
        public string[] GetServiceTypes(System.Guid executorId) {
            return base.Channel.GetServiceTypes(executorId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetServiceTypesAsync(System.Guid executorId) {
            return base.Channel.GetServiceTypesAsync(executorId);
        }
        
        public int CountExecutorServiceTypes(System.Guid executorId) {
            return base.Channel.CountExecutorServiceTypes(executorId);
        }
        
        public System.Threading.Tasks.Task<int> CountExecutorServiceTypesAsync(System.Guid executorId) {
            return base.Channel.CountExecutorServiceTypesAsync(executorId);
        }
        
        public System.Collections.Generic.Dictionary<string, string>[] GetReviews(System.Guid executorId) {
            return base.Channel.GetReviews(executorId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>[]> GetReviewsAsync(System.Guid executorId) {
            return base.Channel.GetReviewsAsync(executorId);
        }
        
        public int CountReviews(System.Guid executorId) {
            return base.Channel.CountReviews(executorId);
        }
        
        public System.Threading.Tasks.Task<int> CountReviewsAsync(System.Guid executorId) {
            return base.Channel.CountReviewsAsync(executorId);
        }
        
        public void DeleteReview(System.Guid executorId, System.Guid reviewId) {
            base.Channel.DeleteReview(executorId, reviewId);
        }
        
        public System.Threading.Tasks.Task DeleteReviewAsync(System.Guid executorId, System.Guid reviewId) {
            return base.Channel.DeleteReviewAsync(executorId, reviewId);
        }
        
        public void ChangeAvatar(System.Guid profileId, string ImagePath) {
            base.Channel.ChangeAvatar(profileId, ImagePath);
        }
        
        public System.Threading.Tasks.Task ChangeAvatarAsync(System.Guid profileId, string ImagePath) {
            return base.Channel.ChangeAvatarAsync(profileId, ImagePath);
        }
        
        public void ChangeEmail(System.Guid profileId, string email) {
            base.Channel.ChangeEmail(profileId, email);
        }
        
        public System.Threading.Tasks.Task ChangeEmailAsync(System.Guid profileId, string email) {
            return base.Channel.ChangeEmailAsync(profileId, email);
        }
        
        public string GetEmail(System.Guid profileId) {
            return base.Channel.GetEmail(profileId);
        }
        
        public System.Threading.Tasks.Task<string> GetEmailAsync(System.Guid profileId) {
            return base.Channel.GetEmailAsync(profileId);
        }
        
        public System.Collections.Generic.Dictionary<string, string>[] GetCustomerFilteredOrders(System.Guid profileId, string parameter) {
            return base.Channel.GetCustomerFilteredOrders(profileId, parameter);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>[]> GetCustomerFilteredOrdersAsync(System.Guid profileId, string parameter) {
            return base.Channel.GetCustomerFilteredOrdersAsync(profileId, parameter);
        }
    }
}
